MGL

Common Lisp machine learning library by Gabor Melis with some parts
contributed by Ravenpack International. Implements:
- Restricted Boltzmann Machines and Deep Belief Networks
- Semi Restricted Boltzmann Machines
- Boltzmann Machines
- Backprop networks
- Unrolling DBN to backrop network
- Contrastive Divergence, Persistent Contrastive Divergence
- Gradient descent optimization
- Conjugate gradient optimization

It's under the MIT licence. See COPYING.


* Tests

Run the built in tests with:

  (ASDF:OOS 'ASDF:TEST-OP '#:MGL)

Note, that most of the tests are rather stochastic and can fail once
in a while.


* Matlisp

If Matlisp is loaded, MGL takes advantage of it which speeds things up
by a factor of 2-4. Matlisp may be loaded at any time, before or after
MGL. In src/matlisp/ there is a very small Lisp implementation of some
of the Matlisp functionality to allow operation without Matlisp. This
implementation was largely ripped from the true Matlisp distribution
with trivial modifications.


* Installing BLAS

Installing BLAS can be a pain. For example, on my Debian Lenny desktop
machine with sbcl I did this to get BLAS:

First you need to install a BLAS implementation. Don't bother with the
fortran reference implementation, it's slower than the lisp code.
Install the platform specific atlas or mkl (not free) package.
Compiling atlas locally can be a big gain in some cases.

On my Debian Lenny I compiled the ATLAS from source like this:

  # apt-get install gfortran
  # echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
  $ cd ATLAS
  $ mkdir build-x86-64
  $ cd build-x86-64
  $ ../configure -Fa alg -fPIC
  $ make
  $ cd lib
  $ make ptshared
  $ cd ..
  $ make ptcheck
  $ make time
  # <restore the cpufreq scaling governor>


* Installing Matlisp

Get Matlisp:

  git://matlisp.git.sourceforge.net/gitroot/matlisp/matlisp

If you have the stock sse2 package of ATLAS then configure it as:

  cd matlisp/
  autoreconf --install
  mkdir build-x86-64
  cd build-x86-64
  ../configure --with-atlas=/usr/lib/sse2/ --with-lisp=sbcl --libdir=$PWD/lib/

or 

  ../configure --with-atlas=/home/mega/ATLAS/build-x86-64/lib/ \
      --enable-sbcl --with-lisp-exec='/home/mega/bin/sbcl' \
      --libdir=$PWD/lib/

in my case. You may also have to use --with-f77=gfortran or something
similar. On a suse system, I had to set FFLAGS to '-fPIC -g -O2'
before configure and edit matlisp.mk to add -fPIC to the compile flags
for dlamch.f else ld could not link it the dynamic lib. Oh, and
sometimes loading of matlisp.so fails with a complaint about __powidf2
in which case you either downgrade to autonconf2.59 and run it at the
top of the source tree or simply add -lgcc_s to FLIBS in matlisp.mk or
matlisp.mk.in.

If you want to use the threaded libs (create by 'make ptshared'), then
replace libcblas and libf77blas with libptcblas and libptf77blas
respectively in build-x86-64/lib/lazy-loader.lisp.

Build Matlisp:

  $ make

finally load matlisp/build-x86-64/start.lisp.
