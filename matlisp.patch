(let* ((a (make-array 4 :element-type 'double-float
                      :initial-contents '(0d0 1d0 2d0 3d0)))
       (b (make-array 2 :element-type 'double-float
                      :displaced-to a :displaced-index-offset 1)))
  (blas:dscal 2 2d0 b 1))

Index: src/ffi-sbcl.lisp
===================================================================
RCS file: /cvsroot/matlisp/matlisp/src/ffi-sbcl.lisp,v
retrieving revision 1.2
diff -u -p -r1.2 ffi-sbcl.lisp
--- src/ffi-sbcl.lisp	24 May 2004 16:34:22 -0000	1.2
+++ src/ffi-sbcl.lisp	24 Sep 2007 08:14:58 -0000
@@ -660,16 +660,16 @@ for :OUTPUT.
 (deftype matlisp-specialized-array ()
   `(or (complex double-float)
        (complex single-float)
-       (simple-array (complex double-float) *)
-       (simple-array (complex single-float) *)
-       (simple-array double-float *)
-       (simple-array single-float *)
-       (simple-array (signed-byte 32) *)
-       (simple-array (signed-byte 16) *)
-       (simple-array (signed-byte  8) *)
-       (simple-array (unsigned-byte 32) *)
-       (simple-array (unsigned-byte 16) *)
-       (simple-array (unsigned-byte  8) *)))
+       (array (complex double-float) *)
+       (array (complex single-float) *)
+       (array double-float *)
+       (array single-float *)
+       (array (signed-byte 32) *)
+       (array (signed-byte 16) *)
+       (array (signed-byte  8) *)
+       (array (unsigned-byte 32) *)
+       (array (unsigned-byte 16) *)
+       (array (unsigned-byte  8) *)))
 
 ;; Removing 'inlines'
 ;; It seems that CMUCL has a problem
@@ -677,7 +677,7 @@ for :OUTPUT.
 ;; lisp image is saved.  Until
 ;; the matter is clarified we
 ;; leave out 'inline's
-(declaim (inline vector-data-address))
+;;(declaim (inline vector-data-address))
 (defun vector-data-address (vec)
   "Return the physical address of where the actual data of the object
 VEC is stored.
@@ -750,19 +750,25 @@ Returns
 		 (the (unsigned-byte 32) 
 		   (logandc1 7 (sb-kernel:get-lisp-obj-address vec))))) 
 	    (declare (type (unsigned-byte 32) base-address))
-	    (sb-sys:int-sap
-	     (etypecase vec
-	       ((complex double-float)
-		(the (unsigned-byte 32) (+ 8 base-address)))
-	       ((complex single-float)
-		(the (unsigned-byte 32) (+ 4 base-address)))
-	       ((simple-array * *)
-		;; A multidimensional simple-array
-		(let ((data-vector
-		       (logandc1 7 (sb-sys:sap-ref-32
-				    (sb-sys:int-sap (+ base-address 16))
-				    0))))
-		  (the (unsigned-byte 32) (+ data-vector 8))))))))))
+            (let ((sap (sb-sys:int-sap
+                        (etypecase vec
+                          ((complex double-float)
+                           (the (unsigned-byte 32) (+ 8 base-address)))
+                          ((complex single-float)
+                           (the (unsigned-byte 32) (+ 4 base-address)))
+                          ((array * *)
+                           ;; A multidimensional simple-array
+                           (let ((data-vector
+                                  (logandc1 7 (sb-sys:sap-ref-32
+                                               (sb-sys:int-sap
+                                                (+ base-address 16))
+                                               0))))
+                             (the (unsigned-byte 32) (+ data-vector 8))))))))
+              (multiple-value-bind (displaced-to-array displaced-to-index)
+                  (array-displacement vec)
+                (when displaced-to-array
+                  (incf-sap :double-float sap displaced-to-index))
+                sap))))))
 
 ;;; Hmm, according to the Solaris f77 manpage, Fortran assumes certain
 ;;; floating point modes.  It says arithmetic is non-stop and
@@ -798,7 +804,7 @@ Returns
   ;; the alien object but before the alien function is called.  Let's
   ;; be safe rather than sorry.
   `(with-fortran-float-modes
-    (sb-sys::without-gcing
+     (sb-sys::with-pinned-objects ,(mapcar #'second vlist)
 	   (let (,@(mapcar #'(lambda (pair)
 			       `(,(first pair)
 				 (vector-data-address ,(second pair))))
